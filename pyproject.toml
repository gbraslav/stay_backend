[project]
name = "stay-backend"
version = "1.0.0"
description = "Email processing API for StayOnTop mobile app"
authors = [{name = "StayOnTop Team", email = "team@stayontop.com"}]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = ["email", "gmail", "api", "flask", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Communications :: Email",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "Flask==3.0.3",
    "Flask-SQLAlchemy==3.1.1",
    "Flask-CORS==4.0.1",
    "google-auth==2.29.0",
    "google-auth-oauthlib==1.2.0",
    "google-api-python-client==2.134.0",
    "openai==1.35.14",
    "celery==5.3.4",
    "redis==5.0.7",
    "python-dotenv==1.0.1",
    "marshmallow==3.21.3",
    "gunicorn==22.0.0",
    "email-validator==2.2.0",
    "html2text==2024.2.26",
    "flask-swagger-ui==4.11.1",
    "flasgger==0.9.7.1",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.2",
    "pytest-flask==1.3.0",
    "pytest-mock==3.14.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

test = [
    "pytest==8.2.2",
    "pytest-flask==1.3.0",
    "pytest-mock==3.14.0",
    "pytest-cov>=4.0.0",
]

docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
]


[project.urls]
Homepage = "https://github.com/stayontop/stay-backend"
Documentation = "https://stay-backend.readthedocs.io"
Repository = "https://github.com/stayontop/stay-backend.git"
"Bug Tracker" = "https://github.com/stayontop/stay-backend/issues"


[tool.uv]
dev-dependencies = [
    "pytest==8.2.2",
    "pytest-flask==1.3.0",
    "pytest-mock==3.14.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[tool.uv.sources]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]